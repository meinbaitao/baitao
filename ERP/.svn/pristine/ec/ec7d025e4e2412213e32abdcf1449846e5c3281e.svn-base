package com.bt.modules.execution.web;

import java.io.Console;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.lang3.RandomStringUtils;
import org.apache.shiro.authz.annotation.RequiresPermissions;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.bt.common.exceptions.BusinessException;
import com.bt.modules.attachment.entity.Attachment;
import com.bt.modules.attachment.service.AttachmentService;
import com.bt.modules.execution.entity.Schedule;
import com.bt.modules.execution.entity.ScheduleIssue;
import com.bt.modules.execution.entity.Scheduledetail;
import com.bt.modules.execution.service.ScheduleIssueService;
import com.bt.modules.execution.service.ScheduleService;
import com.bt.modules.orbom.entity.OrderBomDetail;
import com.bt.modules.production.entity.Production;
import com.bt.modules.production.service.ProductionService;
import com.bt.modules.project.entity.Project;
import com.bt.modules.project.entity.Subproject;
import com.bt.modules.project.service.ProjectService;
import com.bt.modules.project.service.SubProjectService;
import com.bt.modules.supplier.entity.Supplier;
import com.bt.modules.utils.CommonStatus;
import com.bt.modules.utils.UploadUtils;
import com.thinkgem.jeesite.common.persistence.Page;
import com.thinkgem.jeesite.common.utils.IdGen;
import com.thinkgem.jeesite.common.utils.StringUtils;
import com.thinkgem.jeesite.common.web.BaseController;
import com.thinkgem.jeesite.modules.sys.entity.User;
import com.thinkgem.jeesite.modules.sys.utils.UserUtils;


/**
 * 施工管理 -->项目进度管理
 * @author xjp
 * @version 2015-8-1
 */
@Controller
@RequestMapping(value = "${adminPath}/constdraw")
public class ConstDrawController extends BaseController {
	
	@Autowired
	private ProjectService projectService;//一级项目Service
	/**
	 * 附件上传
	 */
	@Autowired
	private AttachmentService attachService;
	
	/**
	 * 二级项目Service
	 */
	@Autowired
	private SubProjectService subProjectService;
	
	/**
	 * ajax 由项目一级id取二级项目
	 * @param request
	 * @return
	 */
	@ResponseBody
	@RequestMapping(value="getSubProjectById")
	public List<Subproject> getSubProjectById(HttpServletRequest request){
		String projectId = request.getParameter("projectId");
		return subProjectService.findByPIdAttachmentList(projectId);
	}
	
	
	/**
	 * 一级项目进度查询列表
	 * @param schedule
	 * @param request
	 * @param response
	 * @param model
	 * @return
	 */
	@RequestMapping(value = {"list", ""})
	public String findScheduleList(Project project,HttpServletRequest request,HttpServletResponse response,Model model) {

		List<Map<String, Object>> listMap = projectService.gbProByName();
		model.addAttribute("listMap", listMap);
		
	/*	List<Map<String, Object>> listall = projectService.getProAttachmentList();
		model.addAttribute("list", listall);*/
		
		project.setWorkflowstatus(CommonStatus.WORK_FLOW_END);
		
		//Page<Project> page = projectService.findPage(new Page<Project>(request, response), project);
		Page<Project> page = null;
		Boolean isJGC = UserUtils.verificationRole("scjgry");
		Boolean isJGCFZR = UserUtils.verificationRole("jgcfzr");
		Boolean isSJJL = UserUtils.verificationRole("sjjl");
		if (isJGC||isJGCFZR) {
			project.setMemberListStr(UserUtils.getUserId());
			page = projectService.getListForProjectByJGC(new Page<Project>(request, response), project);
		}else if(UserUtils.getUser().isAdmin()||isSJJL){
			page = projectService.findPage(new Page<Project>(request, response), project);
		}
		else {
			project.setAboutUser(UserUtils.getUser());
			page = projectService.getListForProject(new Page<Project>(request, response), project);
		}
		model.addAttribute("page", page);
		//填写设计师
		model.addAttribute("subproject", new Subproject());
		return "modules/execution/constdrawList";
	}

	/**
	 * 上传附件
	 * @param request
	 * @param servletRequest
	 * @return
	 * @throws IllegalStateException
	 * @throws IOException
	 */	
	@RequestMapping(value = "uploadFile")
	//@ResponseBody
	public String upload(MultipartHttpServletRequest request,HttpServletRequest servletRequest,RedirectAttributes redirectAttributes) throws IllegalStateException, IOException{
		//UploadFileUtils upload = new UploadFileUtils();
		
		//String subprojectIdlst= servletRequest.getParameter("buildingTwo");
		String[] listsubID= servletRequest.getParameterValues("buildingTwo");
		String subprojectId = "";
		//String[] listsubID=subprojectIdlst.split(",");
		
//		if (subprojectIdlst.indexOf(",") != -1) {
//						
//		}
		
		StringBuilder sb = new StringBuilder();
		sb.append("<br/>");
		
		String basePath = "D:"+File.separator+"dm"+File.separator+"upload"+File.separator;
		Iterator<String> itr = request.getFileNames();
		List<String> list = new ArrayList<String>();
		while(itr.hasNext()){
			MultipartFile file = request.getFile(itr.next());
			String fileName =file.getOriginalFilename();			
			SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMdd");
			String ymd = sdf.format(new Date())+File.separator;
			String dirName="project"+File.separator+"constdraw"+File.separator;
			
			SimpleDateFormat format = new SimpleDateFormat("HHmmssSSS");
			String formatDate = format.format(new Date());
			String lastPath=formatDate+RandomStringUtils.random(3, false, true); 
			
			String savePath=basePath+dirName+ymd+lastPath+File.separator;
			File saveDirFile = new File(savePath);
			if (!saveDirFile.exists()) {
				saveDirFile.mkdirs();
			}
			try {
				file.transferTo(new File(savePath + fileName));
				
				for (int i = 0; i < listsubID.length; i++) {
					subprojectId = listsubID[i];
					// 保存附件表
					String type = fileName.substring(
							fileName.lastIndexOf(".") + 1, fileName.length());
					String url = request.getRequestURL().toString();
					url = url.substring(0, url.lastIndexOf("/"));
					String processChartType = servletRequest.getParameter("processChartType");
					// 保存附件
					Attachment attachment = new Attachment();
					attachment.setId(IdGen.uuid());
					attachment.setAttachAddress(savePath); // 服务器存放地址
					attachment.setName(fileName);
					attachment.setAttachType(type);
					attachment.setType(subprojectId);
					attachment.setAttachUrl(url); // 下载地址
					attachment.setProcessChartType(processChartType);
					attachService.save(attachment);
					sb.append(fileName).append(
							fileName.length() > 1 ? "<br/>" : "");
				}

			} catch (IllegalStateException e) {
				e.printStackTrace();
			} catch (IOException e) {
				e.printStackTrace();
			}

			//list.add(fileName);		
		
		}
		addMessage(redirectAttributes, "文件上传成功");	
		//addMessage(redirectAttributes, "文件上传成功"+sb.toString());		
		
		return "redirect:" + adminPath + "/constdraw/list";
	}
	
	/**
	 * 下载附件
	 * @param request
	 * @param response
	 * @param redirectAttributes 
	 * @return
	 * @throws Exception 
	 */
	@RequestMapping(value="download")
	public void download(HttpServletRequest request, HttpServletResponse response, RedirectAttributes redirectAttributes) throws Exception {
		//String fileName = request.getParameter("fileName");
		String fileid = request.getParameter("fileId");
//		String[] oCheckd = request.getParameterValues("vCheckd");
//		String fileid ="";
//		if(oCheckd != null && oCheckd.length > 0){
//			String[] file = oCheckd[0].split(",");
//			if(file != null && file.length > 0){
//				for (int i = 0; i < file.length; i++) {
//					fileid = file[i];
//					if(StringUtils.isNotBlank(fileid)){
						Attachment modelAttachment=attachService.get(fileid);		
						String fileName=modelAttachment.getName();
						
						response.setCharacterEncoding("utf-8");
						response.setContentType("multipart/form-data");
						response.setHeader("Content-Disposition", "attachment;fileName="
								+ fileName);
						String basePath = "upload";
						String dirName = "contract/manuf";
						String userAgent = request.getHeader("User-Agent");
						try {
							if(userAgent.contains("Firefox")){
									response.setHeader("Content-Disposition", "attachment;fileName*="+ URLEncoder.encode(fileName, "UTF-8"));
							}else{
									response.setHeader("Content-Disposition", "attachment;fileName="+ URLEncoder.encode(fileName, "UTF-8"));
							}
						} catch (UnsupportedEncodingException e1) {
							e1.printStackTrace();
						}
						InputStream inputStream = null;
						OutputStream os = null;
						String path = "";
						try {
							/*String path = "D:/dm/" + basePath + "/" + dirName + "/";
							SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMdd");
							String ymd = sdf.format(new Date());
							path += ymd + "/";*/
							
							path=modelAttachment.getAttachAddress();
							
							inputStream = new FileInputStream(new File(path + File.separator
									+ fileName));
							os = response.getOutputStream();
							byte[] b = new byte[2048];
							int length;
							while ((length = inputStream.read(b)) > 0) {
								os.write(b, 0, length);
							}
						} catch (FileNotFoundException e) {
							e.printStackTrace();
							throw new BusinessException("order.bombase.file.not.found",fileName,path);
						} catch (IOException e) {
							e.printStackTrace();
						} finally {
							if (null != inputStream) {
								try {
									inputStream.close();
								} catch (IOException e) {
									e.printStackTrace();
								}
							}
							if (null != os) {
								try {
									os.close();
								} catch (IOException e) {
									e.printStackTrace();
								}
							}
						}
//					}
//				}
//			}
//		}else{
//			addMessage(redirectAttributes, "下载失败");
//		}
	}
}
