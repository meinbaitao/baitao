/**
 * Copyright &copy; 2012-2014 <a href="https://github.com/thinkgem/jeesite">JeeSite</a> All rights reserved.
 */
package com.bt.modules.execution.web;

import java.io.File;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.shiro.authz.annotation.RequiresPermissions;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.thinkgem.jeesite.common.config.Global;
import com.thinkgem.jeesite.common.web.BaseController;
import com.thinkgem.jeesite.common.utils.IdGen;
import com.thinkgem.jeesite.common.utils.StringUtils;
import com.thinkgem.jeesite.modules.sys.entity.User;
import com.thinkgem.jeesite.modules.sys.utils.UserUtils;
import com.bt.modules.attachment.entity.Attachment;
import com.bt.modules.attachment.service.AttachmentService;
import com.bt.modules.execution.entity.Accident;
import com.bt.modules.execution.service.AccidentService;
import com.bt.modules.project.entity.Project;
import com.bt.modules.project.service.ProjectService;
import com.bt.modules.utils.UploadUtils;

/**
 * 事故单Controller
 * @author xjp
 * @version 2015-08-14
 */
@Controller
@RequestMapping(value = "${adminPath}/accident")
public class AccidentController extends BaseController {

	@Autowired
	private AccidentService accidentService;
	
	/**
	 * 一级项目Service
	 */
	@Autowired
	private ProjectService projectService;
	
	/**
	 * 附件上传
	 */
	@Autowired
	private AttachmentService attachService;
	
	
	@ModelAttribute
	public Accident get(@RequestParam(required=false) String id) {
		Accident entity = null;
		if (StringUtils.isNotBlank(id)){
			entity = accidentService.get(id);
		}
		if (entity == null){
			entity = new Accident();
		}
		return entity;
	}
	
	/**
	 * 添加事故问题
	 * @param accident
	 * @param model
	 * @param redirectAttributes
	 * @return
	 */
	//@RequiresPermissions("accident:edit")
	@RequestMapping(value ="addaccident",method=RequestMethod.POST)
	public String addaccident(Accident accident, HttpServletRequest request,Model model, RedirectAttributes redirectAttributes) {
		String accidentId = request.getParameter("accidentId");
		if(StringUtils.isNotEmpty(accidentId)){
			accident.setId(accidentId);
			accident.setIsSupply("on".equals(accident.getIsSupply())?"1":"0");
			accident.setIsPunish("on".equals(accident.getIsPunish())?"1":"0");
			User user = UserUtils.getUser();
			accident.setUpdateBy(user);
			accident.setUpdateDate(new Date());
			accidentService.update(accident);
			addMessage(redirectAttributes, "修改事故单成功");
		}else{
			accident.setId(IdGen.uuid());
			accident.setIsSupply("on".equals(accident.getIsSupply())?"1":"0");
			accident.setIsPunish("on".equals(accident.getIsPunish())?"1":"0");
			accidentService.save(accident);
			addMessage(redirectAttributes, "保存事故单成功");
		}
		return "redirect:" + adminPath + "/accident/list/";
	}
	
	
	//@RequiresPermissions("accident:view")
	@RequestMapping(value = {"list", ""})
	public String list(Accident accident, HttpServletRequest request, HttpServletResponse response, Model model) { 
		
		List<Map<String, Object>> list = accidentService.findListByProjectId(accident);
		//获取所有的项目名称
		List<Project> projectList = projectService.findByProjectName();
		
		model.addAttribute("list", list);
		model.addAttribute("projectList", projectList);
		return "modules/execution/accidentList";
	}
	
	
	//@RequiresPermissions("accident:view")
	@ResponseBody
	@RequestMapping(value = {"listdetail", ""})
	public List<Map<String, Object>> listDetail(Accident accident, HttpServletRequest request, HttpServletResponse response, Model model) { 
		accident.setProjectId(request.getParameter("projectId"));
		return accidentService.findListByProjectId(accident);
	}
	
	/**
	 * 根据事故单查询明细
	 */
	//@RequiresPermissions("accident:view")
	@ResponseBody
	@RequestMapping(value = {"queryaccidentdetail", ""})
	public Accident findAccidentById(HttpServletRequest request, HttpServletResponse response) { 
		String accidentId=request.getParameter("accidentId");
		return accidentService.get(accidentId);
	}
	
	
	/**
	 * 事故填写上传附件
	 * @param MultipartFile
	 * @param redirectAttributes
	 * @return
	 */
	//@RequiresPermissions("accident:view")
	//Fixme  多个字符串的链接请改用 StringBuilder 替换
	@ResponseBody
	@RequestMapping(value = "upload",method=RequestMethod.POST)
	public String upload(MultipartFile file,HttpServletRequest request,RedirectAttributes redirectAttributes) {
		
		String basePath = "upload";
		String dirName = "attach";
	
		// 文件保存目录路径
		String savePath = "D:/dm/"+ basePath + "/";
		
		// 创建文件夹
		savePath += dirName + "/";
		//saveUrl += dirName + "/";
		File saveDirFile = new File(savePath);
		if (!saveDirFile.exists()) {
			saveDirFile.mkdirs();
		}
		// .../basePath/dirName/yyyyMMdd/
		SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMdd");
		String ymd = sdf.format(new Date());
		savePath += ymd + "/";
		
		UploadUtils utils = new UploadUtils();
		String info =utils.uploadFile(request, file, savePath);
		if("true".equals(info)){
			return file.getOriginalFilename();
		}
		
		Attachment attachment = new Attachment();
		attachment.setId(IdGen.uuid());
		attachment.setAttachAddress(savePath); //服务器存放地址
		attachment.setName(file.getOriginalFilename());
		attachment.setAttachType(file.getName());
		attachService.save(attachment);
		
		return info;
	}
	
	
	//@RequiresPermissions("accident:view")
	@RequestMapping(value = "form")
	public String form(Accident accident, Model model) {
		model.addAttribute("accident", accident);
		return "modules/execution/accidentForm";
	}

	
	//@RequiresPermissions("accident:edit")
	@RequestMapping(value = "delete")
	public String delete(Accident accident, RedirectAttributes redirectAttributes) {
		accidentService.delete(accident);
		addMessage(redirectAttributes, "删除事故单成功");
		return "redirect:"+Global.getAdminPath()+"/execution/accident/?repage";
	}

}