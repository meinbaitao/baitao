/**
 * Copyright &copy; 2012-2014 <a href="https://github.com/thinkgem/jeesite">JeeSite</a> All rights reserved.
 */
package com.bt.modules.report.weekly.mianly.web;


import com.bt.modules.report.common.FilesUploadForm;
import com.bt.modules.report.weekly.mianly.entity.BuildingSchedule;
import com.bt.modules.report.weekly.mianly.entity.ProjWeeklyReport;
import com.bt.modules.report.weekly.mianly.service.BuildingScheduleService;
import com.bt.modules.report.weekly.mianly.service.ProjWeeklyReportService;
import com.thinkgem.jeesite.common.utils.FileUtils;
import com.thinkgem.jeesite.common.web.BaseController;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.PropertySource;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.commons.CommonsMultipartFile;

import javax.servlet.http.HttpServletRequest;
import java.io.File;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.InetAddress;
import java.net.UnknownHostException;
import java.util.List;
import java.util.Properties;

/**
 * 周报-在建进度Controller
 * @author jinyuanf
 * @version 2015-11-25
 */
@Controller
@RequestMapping(value = "${adminPath}/report/weekly/buildingSchedule")
@Configuration
@PropertySource("classpath:jeesite.properties")
public class BuildingScheduleController extends BaseController {

	@Autowired
	private BuildingScheduleService buildingScheduleService;

	@Autowired
	private ProjWeeklyReportService weeklyReportService;

	@Autowired
	@Qualifier("APP_PROP")
	private Properties applicationProperties;


	@RequestMapping(value = "getLastWeekOneByProjAndBuildNo/{projectId}/{buildNo}")
	public @ResponseBody BuildingSchedule getLastWeekOneByProjAndBuildNo(@PathVariable String projectId,@PathVariable String buildNo){
		return buildingScheduleService.getLastWeekOneByProjAndBuildNo(projectId, buildNo);
	}

	@RequestMapping(value="initUploadPage/{buildingScheduleId}")
	public String initUploadPage(Model model,@PathVariable String buildingScheduleId){
		BuildingSchedule buildingSchedule = buildingScheduleService.get(buildingScheduleId);
		model.addAttribute("buildingSchedule",buildingSchedule);
		return "modules/report/weekly/mainly/buildingScheduleImages";
	}

	@RequestMapping(value="buildingImagesView/{buildingScheduleId}")
	public String buildingImagesView(Model model,@PathVariable String buildingScheduleId){
		BuildingSchedule buildingSchedule = buildingScheduleService.get(buildingScheduleId);
		model.addAttribute("buildingSchedule",buildingSchedule);
		return "modules/report/weekly/mainly/buildingScheduleImagesView";
	}

	@RequestMapping(value="uploadBuildingImages", method = RequestMethod.POST)
	public String uploadBuildingImages(@ModelAttribute("uploadForm") FilesUploadForm uploadForm,
									   Model model, HttpServletRequest request) throws IOException {
		List<MultipartFile> files = uploadForm.getFiles();
		MultipartFile southFile = files.get(0);
		MultipartFile northFile = files.get(1);
		MultipartFile eastFile = files.get(2);
		MultipartFile westFile = files.get(3);

		String rootDir = request.getSession().getServletContext().getRealPath("/") + "/";

		BuildingSchedule buildingScheduleQuery = buildingScheduleService.get(uploadForm.getBuildingScheduleId());
		ProjWeeklyReport report = weeklyReportService.get(buildingScheduleQuery.getReportId());

		if(southFile.getSize()>0){
			String filePath = buildFilePath(southFile, report.getProjectId());
			String fullFilePath = rootDir + filePath;
			FileUtils.copyInputStreamToFile(southFile.getInputStream(), new File(fullFilePath));
			BuildingSchedule southBuilding = new BuildingSchedule();
			southBuilding.setId(uploadForm.getBuildingScheduleId());
			southBuilding.setSchedulePicSouth(filePath);
			buildingScheduleService.updateSouthImage(southBuilding);
		}

		if(northFile.getSize()>0){
			String filePath = buildFilePath(northFile, report.getProjectId());
			String fullFilePath = rootDir + filePath;
			FileUtils.copyInputStreamToFile(northFile.getInputStream(), new File(fullFilePath));
			BuildingSchedule northBuilding = new BuildingSchedule();
			northBuilding.setId(uploadForm.getBuildingScheduleId());
			northBuilding.setSchedulePicNorth(filePath);
			buildingScheduleService.updateNorthImage(northBuilding);
		}

		if(eastFile.getSize()>0){
			String filePath = buildFilePath(eastFile, report.getProjectId());
			String fullFilePath = rootDir + filePath;
			FileUtils.copyInputStreamToFile(eastFile.getInputStream(), new File(fullFilePath));
			BuildingSchedule eastBuilding = new BuildingSchedule();
			eastBuilding.setId(uploadForm.getBuildingScheduleId());
			eastBuilding.setSchedulePicEast(filePath);
			buildingScheduleService.updateEastImage(eastBuilding);
		}

		if(westFile.getSize()>0){
			String filePath = buildFilePath(westFile, report.getProjectId());
			String fullFilePath = rootDir + filePath;
			FileUtils.copyInputStreamToFile(westFile.getInputStream(), new File(fullFilePath));
			BuildingSchedule westBuilding = new BuildingSchedule();
			westBuilding.setId(uploadForm.getBuildingScheduleId());
			westBuilding.setSchedulePicWest(filePath);
			buildingScheduleService.updateWestImage(westBuilding);
		}

		BuildingSchedule buildingSchedule = buildingScheduleService.get(uploadForm.getBuildingScheduleId());
		model.addAttribute("buildingSchedule", buildingSchedule);
		return "modules/report/weekly/mainly/buildingScheduleImages";
	}


	private String buildFilePath(MultipartFile file, String projectId) throws UnknownHostException, UnsupportedEncodingException {
		String uploadDir = applicationProperties.getProperty("wanfang.upload.building.schedule.images.dir");
		String fileName = ((CommonsMultipartFile) file).getFileItem().getName();
		fileName = fileName.replaceAll("#", "_");
		StringBuilder filePath = new StringBuilder();

		filePath.append(uploadDir);
		if(!uploadDir.endsWith("/")){
			filePath.append("/");
		}
		filePath.append(projectId).append("/");
		FileUtils.createDirectory(FileUtils.path(filePath.toString()));
		String hostName = InetAddress.getLocalHost().getHostName();
		filePath.append(hostName).append("_");
		filePath.append(System.currentTimeMillis())
				.append("_")
				.append(fileName);
		return FileUtils.path(filePath.toString());
	}



}